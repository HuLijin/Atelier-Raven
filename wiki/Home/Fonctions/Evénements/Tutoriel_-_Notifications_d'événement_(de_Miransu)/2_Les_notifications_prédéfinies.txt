Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-09-02T17:11:33+02:00

====== 2 Les notifications prédéfinies ======

Il est très probable que vous ayez un script Stage ou Plural avec une boucle ''@Event'' vide et que vous ne sachiez pas trop quoi en faire. Si vous êtes dans ce cas, pas de panique, vous saurez bientôt lui trouver une utilité !

Si vous avez déjà fait un script Player ou Single, ce qui suit vous semblera familier :
'''
@Event {
	alternative(GetEventType)
	case(EV_REQUEST_LIFE) { SetScriptResult(3000); }
	case(EV_REQUEST_TIMER) { SetScriptResult(60); }
}
'''
''EV_REQUEST_LIFE'' et ''EV_REQUEST_TIMER'' sont des notifications d'événements prédéfinies.
Pour notre part, nous allns utiliser des notifications plus générales, dont le rôle précis est à définir par l'utilisateur (ce que Miransu et les anglophones appellent //user-defined events//).
L'utilisation de ces notifications dans une boucle ''@Event'' est très similaire aux deux notifications d'événement prédéfinies ci-dessus.

Ces notifications particulières ont un nom générique : les EV_USER. Vous devriez commencer à les utiliser dans un script Stage ou Plural avec une boucle ''@Event'' vide. Elles ont une petite particularité, il en existe plusieurs déclinaisons en fonction du type de script où elles sont utilisées. Regardez la table ci-dessous pour voir quels types d'EV_USER vous avez le droit d'utiliser. Même s'il n'est pas strictement obligatoire d'utiliser le bon type d'EV_USER, ce sera plus facile pour vous par la suite de repérer quelles valeurs viennent de quel script, en particulier si vous comptez faire un jeu complet.

'''
Script Type   ||    EV_USER Type
================================
Single        ||    EV_USER
Plural        ||    EV_USER
Stage         ||    EV_USER_STAGE
Package       ||    EV_USER_PACKAGE
System        ||    EV_USER_SYSTEM
Player        ||    EV_USER_PLAYER
'''


== Récupération de l'ID d'un script ==
Pour ce tutriel, on va utliser un script Stage. Comme ''NotifyEvent'' a besoin de l'ID du script, on va avoir besoin de récupérer cet ID manuellement, en utilisant les Common Data. Cela permettra de notifier le script Stage depuis n'importe quel autre endroit.
Pour faire cela, ajoutez ceci dans la boucle @Initialize du script :
''SetCommonData("Main Stage Script ID", GetOwnScriptID());''
Vous verrez que ça nous sera bientôt très utile.

== Mise en pratique des EV_USER : définition de l'événement associé ==
Comme nous travaillons sur un script Stage, nous allons utiliser le type EV_USER_STAGE dans la boucle @Event de notre script.
'''
@Event {
	alternative(GetEventType)
	case(EV_USER_STAGE) {
		// ---
	}
}
'''

Comme mentionné auparavant, notre but est de faire spawner des objets. Cependant, nous allons procéder par petites étapes. La première étape est de faire en sorte que le stage fasse spawner un seul objet Power-Up à une position fixe :
'''
@Event {
	alternative(GetEventType)
	case(EV_USER_STAGE) {
		CreateItemA1(ITEM_POWER, 96+rand(-50,50), 128+rand(-50,50), 1000);
	}
}
'''


Une fois notifié, notre stage fera apparaitre un objet, placé aléatoirement à l'intérieur d'un bloc 100x100 dont le  cntre est fixé aux coordonnées (96;128).
Cependant, pour le moment, notre événement n'est jamais notifié au sein de notre script entier. Du moins, pas pour le moment. Réglons-ça de suite !

