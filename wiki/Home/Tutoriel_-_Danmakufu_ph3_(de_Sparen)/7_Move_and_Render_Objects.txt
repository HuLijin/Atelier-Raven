Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-09-01T17:19:25+02:00

====== 7 Move and Render Objects ======

The two main types of objects you will deal with use Move and Render functions. **All bullets, enemies, and the like use ObjMove to control them. Graphics use ObjRender.** However, there are a number of things that are extremely important.

[*] **Please reference the following!** [Object Hierarchy Diagram]

* All enemies will use ObjMove for pretty much everything. However, the object can and should also use ObjRender commands for their graphics. **Use ObjRender to set and control their graphic, and use ObjMove to control the position and other attributes of the object itself.**
* There are a lot of ObjRender functions; **Spend time looking at the accessors** (functions that get information, like ObjMove_GetX) **and mutators** (functions that change data, like ObjRender_SetAlpha, and see which ones fit your needs.
* **ph3 allows for ADD_ARGB, INVERT, SUBTRACT, and MULTIPLY blends, and you can now change hue, saturation, and value.** Keep these things in mind when you use Render Objects. Most of your @DrawLoop and @Background code in 0.12m will be altered into ObjRender form in ph3.
* ph3 also introduces 2D sprites, 2D sprite lists, 3D sprites, meshes, and the like. Most of you ObjEffect functions are now ObjPrim commands (see later), but you should probably use 2D sprites to take care of those. That way, you can remove all of the confusing vertices and maintain all of the flexibility since ObjRender commands are valuable. **Note, however, that your graphics in ph3 should be twice as big, then scaled down. Otherwise, blur will occur at the edges**, unlike in 0.12m where the image would be laid out perfectly, pixel for pixel. **3D sprites shouldn't be used unless you specifically need 3D sprites.**

**Note that in ph3, there are more than 9 render priorities. In fact, there are infinite render priorities.** Functions such as Obj_SetRenderPriority allow you to set the render priority of an object. This gives much more flexibility with graphics and layering. Some important things to notice are as follows:

* **The location of the origin changes from the top left of the STG frame to the top left of the window when you use a render priority of 80 (.8) or above.**
* **By default, the STG_Frame is drawn at the very bottom.** If you want a different render priority, change this in #System=>InitFrame().
* **By default, the Score, Graze, etc. text and the numbers associated with them are drawn with a render priority of 1 (0.01).** If you want a different render priority, change this in #System
* **By default, the boss lifebar is drawn with a render priority of 70 (0.7).** If you want a different render priority, change this in #System=>TBossLife.
* **By default, the boss spell timer is drawn with a render priority of 75 (0.75).** If you want a different render priority, change this in #System=>TBossTimer.
* **By default, the spell card bonus display is drawn with a render priority of 60 (0.6).** If you want a different render priority, change this in #System=>TGainSpell(score).
* **By default, the FPS will be drawn at the very top.** If you want a different render priority, change this in #System=>TCurrentFPS() and #System=>TReplayFPS().
* **By default, the player will be drawn with a render priority of 30 (0.3).** You can change this in your player script
* **By default, bullets will be drawn with a render priority of 50 (0.5).** You can change this if you make shot objects.
* **By default, items will be drawn with a render priority of 60 (0.6).** You can change this if you make a custom item script.
* **If you have two graphics on the same layer, the one created later will appear on top of the one created earlier**
* Note that there may be discrepancies here; **Avoid render priorities of 20 and below.**
