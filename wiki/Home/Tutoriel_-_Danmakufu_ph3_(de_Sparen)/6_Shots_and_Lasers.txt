Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-09-01T17:18:35+02:00

====== 6 Shots and Lasers ======

ph3 brings major changes to shots and lasers. Before, you had no control over them unless you made object shots or object lasers. Now, all of them are objects, and are fully customizable.

Here are the shot functions: Shot Functions

Firstly, each shot/laser creating function returns their object ID. To utilize this, do the following:


  let objShot = CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 3, GetAngleToPlayer(objBoss), 45, 10); 

Note a few things:

Secondly, 45 is a graphic ID from a shot sheet. Do note that all shot constants are different and that ph3's default bullets are way nicer than 0.12m's. Shotsheets are covered later in this guide.

Next, notice GetAngleToPlayer(objBoss). GetAngleToPlayer functions the same way as in 0.12m, except now you need to give it the object ID of the enemy.

Finally, I am storing the ID of the shot in the variable objShot. You can dump this ID into an array or simply act on it right there and then.

Remember CreateShotA and CreateShotA_XY? In ph3, you can use ObjMove_AddPattern functions to make the bullets do things. Since the normal shot creation functions return the bullet ID, you can set speed, angular velocity, etc using the ID. As for CreateShotOA1 and CreateShotOB1, they create a bullet that will spawn on the coordinates of the given object id. The bullet and its arguments act the same as CreateShotA1 in 0.12m, but this is NOT the same.

An important note about ph3: You will use ObjMove functions to control all of these bullets. Also, CreateStraightLaserA1 (the new CreateLaserA and CreateLaserB), has delete time built into it. The delete time will start ticking AFTER the laser has been formed. The laser graphic will always form, although it will have no hitbox if delete time is set to 0.

===== Delay Lasers =====

To make delay lasers, create a task like this:


	task DelayLaser(x, y, ang, l, w, dt, graph, delay){
	   let objlaser = CreateStraightLaserA1(x, y, ang, l, w, dt, graph, delay);
	   wait(delay-1);//So that the graphic never enlarges. 
	   Obj_Delete(objlaser);
   }

Remember that the wider the delay laser, the more likely it will render correctly. Using non-straight laser graphics may result in the delay laser not showing completely. Remember to test your code and make sure that there are no cheap shots with your delay lasers, because hidden delay lasers can be problematic for gameplay.

===== Curvy Lasers =====

For curvy lasers, you must use ObjMove_SetAngularVelocity to set its curve. Annoying but easily done. You have a lot more control over them in ph3, and lasers look MUCH better. Note that pre23 allows you to use non-ADD lasers.

Curvy lasers in ph3 have transparent tips. From ph3 [.1 pre3] and onwards, use ObjCrLaser_SetTipDecrement to set the transparency of laser tips.

ph3 also features ways for you to retrieve shot IDs from a certain area. Note that player shot IDs can be retrieved by GetShotIdInCircleA2. Finally, note that you can retrieve shot information using GetShotDataInfoA1.
